## ATM 


import java.util.Scanner;

public class ATM {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        UserAccount user = new UserAccount();
        
        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();
        
        System.out.print("Enter PIN: ");
        String userPin = scanner.nextLine();

        if (user.authenticate(userId, userPin)) {
            ATMMenu menu = new ATMMenu(user);
            menu.showMenu();
        } else {
            System.out.println("Invalid credentials. Exiting...");
        }
        
        scanner.close();
    }
}


## ATM MENU

import java.util.Scanner;

public class ATMMenu {
    private UserAccount user;

    public ATMMenu(UserAccount user) {
        this.user = user;
    }

    public void showMenu() {
        Scanner scanner = new Scanner(System.in);
        boolean quit = false;

        while (!quit) {
            System.out.println("\n--- ATM Menu ---");
            System.out.println("1. Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");

            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1 -> showTransactionHistory();
                case 2 -> withdraw();
                case 3 -> deposit();
                case 4 -> transfer();
                case 5 -> {
                    quit = true;
                    System.out.println("Exiting. Thank you!");
                }
                default -> System.out.println("Invalid choice. Try again.");
            }
        }

        scanner.close();
    }

    private void showTransactionHistory() {
        System.out.println("Transaction History:");
        for (String transaction : user.getTransactionHistory()) {
            System.out.println(transaction);
        }
    }

    private void withdraw() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter amount to withdraw: ");
        double amount = scanner.nextDouble();
        user.withdraw(amount);
    }

    private void deposit() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter amount to deposit: ");
        double amount = scanner.nextDouble();
        user.deposit(amount);
    }

    private void transfer() {
        Scanner scanner = new Scanner(System.in);
        UserAccount recipient = new UserAccount(); // Simplified example. In a real system, recipient would be another account object.
        System.out.print("Enter amount to transfer: ");
        double amount = scanner.nextDouble();
        user.transfer(amount, recipient);
    }
}


## USER ACCOUNT

import java.util.ArrayList;
import java.util.List;

public class UserAccount {
    private String userId = "user123";
    private String pin = "1234";
    private double balance = 5000.0;
    private List<String> transactionHistory = new ArrayList<>();

    public boolean authenticate(String userId, String userPin) {
        return this.userId.equals(userId) && this.pin.equals(userPin);
    }

    public double getBalance() {
        return balance;
    }

    public void addTransaction(String transaction) {
        transactionHistory.add(transaction);
    }

    public List<String> getTransactionHistory() {
        return transactionHistory;
    }

    public void deposit(double amount) {
        balance += amount;
        addTransaction("Deposited: " + amount);
    }

    public void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            addTransaction("Withdrawn: " + amount);
        } else {
            System.out.println("Insufficient funds.");
        }
    }

    public void transfer(double amount, UserAccount recipient) {
        if (amount <= balance) {
            balance -= amount;
            recipient.deposit(amount);
            addTransaction("Transferred: " + amount + " to " + recipient.userId);
        } else {
            System.out.println("Insufficient funds.");
        }
    }
}
